import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";

export async function registerRoutes(app: Express): Promise<Server> {
  
  // Get examination records by date
  app.get("/api/examinations/:date", async (req, res) => {
    try {
      const { date } = req.params;
      
      if (!date) {
        return res.status(400).json({ 
          message: "Date parameter is required and must be a valid date string (YYYY-MM-DD)" 
        });
      }

      // Validate date format
      const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
      if (!dateRegex.test(date)) {
        return res.status(400).json({ 
          message: "Date must be in YYYY-MM-DD format" 
        });
      }

      const records = await storage.getExaminationsByDate(date);
      res.json(records);
    } catch (error) {
      console.error("Error fetching examinations:", error);
      res.status(500).json({ 
        message: "Internal server error while fetching examination records" 
      });
    }
  });

  // Get examination statistics
  app.get("/api/examinations/stats/:date", async (req, res) => {
    try {
      const { date } = req.params;
      
      if (!date) {
        return res.status(400).json({ 
          message: "Date parameter is required and must be a valid date string (YYYY-MM-DD)" 
        });
      }

      const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
      if (!dateRegex.test(date)) {
        return res.status(400).json({ 
          message: "Date must be in YYYY-MM-DD format" 
        });
      }

      const stats = await storage.getExaminationStats(date);
      res.json(stats);
    } catch (error) {
      console.error("Error fetching examination stats:", error);
      res.status(500).json({ 
        message: "Internal server error while fetching statistics" 
      });
    }
  });

  // Get follow-up appointments by date (based on ngay_hen_tai_kham)
  app.get("/api/followup-appointments/:date", async (req, res) => {
    try {
      const { date } = req.params;
      
      if (!date) {
        return res.status(400).json({ 
          message: "Date parameter is required and must be a valid date string (YYYY-MM-DD)" 
        });
      }

      // Validate date format
      const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
      if (!dateRegex.test(date)) {
        return res.status(400).json({ 
          message: "Date must be in YYYY-MM-DD format" 
        });
      }

      const records = await storage.getFollowUpAppointmentsByDate(date);
      res.json(records);
    } catch (error) {
      console.error("Error fetching follow-up appointments:", error);
      res.status(500).json({ 
        message: "Internal server error while fetching follow-up appointment records" 
      });
    }
  });

  // Get follow-up appointment statistics
  app.get("/api/followup-appointments/stats/:date", async (req, res) => {
    try {
      const { date } = req.params;
      
      if (!date) {
        return res.status(400).json({ 
          message: "Date parameter is required and must be a valid date string (YYYY-MM-DD)" 
        });
      }

      const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
      if (!dateRegex.test(date)) {
        return res.status(400).json({ 
          message: "Date must be in YYYY-MM-DD format" 
        });
      }

      const stats = await storage.getFollowUpAppointmentStats(date);
      res.json(stats);
    } catch (error) {
      console.error("Error fetching follow-up appointment stats:", error);
      res.status(500).json({ 
        message: "Internal server error while fetching follow-up appointment statistics" 
      });
    }
  });

  const httpServer = createServer(app);

  return httpServer;
}


